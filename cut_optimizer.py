import tkinter as tk
from tkinter import scrolledtext, messagebox, filedialog
import os
from datetime import datetime
from itertools import combinations

ROLL_WIDTH = 1050  # largura fixa do rolo em mm

# Vari√°veis globais para armazenar o resultado atual
current_result_text = ""
current_pieces_data = []


def pack_pieces(pieces, roll_width=ROLL_WIDTH, roll_height=None):
    """
    Algoritmo otimizado de for√ßa-bruta inteligente para maximizar aproveitamento.
    Testa todas as combina√ß√µes e orienta√ß√µes poss√≠veis para cada faixa.
    
    Args:
        pieces: Lista de pe√ßas com dimens√µes e quantidades
        roll_width: Largura do rolo (padr√£o: 1050mm)
        roll_height: Altura m√°xima do rolo (padr√£o: sem limite)
    """
    # Expande pe√ßas individuais
    individual_pieces = []
    for p in pieces:
        for _ in range(p['qty']):
            individual_pieces.append((p['w'], p['h'], p['w'], p['h']))

    rows = []
    remaining = individual_pieces[:]
    
    while remaining:
        # Gera orienta√ß√µes poss√≠veis para pe√ßas restantes
        orientations = []
        for i, (w, h, orig_w, orig_h) in enumerate(remaining):
            orientations.append((i, w, h, orig_w, orig_h))      # original
            if w != h:  # rotacionada se diferente
                orientations.append((i, h, w, orig_w, orig_h))
        
        # Busca melhor combina√ß√£o para esta faixa
        best_combo = []
        best_fill = -1
        
        # Testa combina√ß√µes de at√© 6 orienta√ß√µes (otimiza√ß√£o de performance)
        for r in range(1, min(6, len(orientations)) + 1):
            for combo in combinations(range(len(orientations)), r):
                # Verifica se usa pe√ßas diferentes
                used_pieces = set()
                valid = True
                total_width = 0
                
                for idx in combo:
                    piece_idx = orientations[idx][0]
                    if piece_idx in used_pieces:
                        valid = False
                        break
                    used_pieces.add(piece_idx)
                    total_width += orientations[idx][1]  # largura
                
                if valid and total_width <= roll_width and total_width > best_fill:
                    best_fill = total_width
                    best_combo = [orientations[idx] for idx in combo]
                    if best_fill == roll_width:  # preenchimento perfeito
                        break
            if best_fill == roll_width:
                break
        
        if not best_combo:
            break
            
        # Remove pe√ßas usadas
        used_indices = sorted([item[0] for item in best_combo], reverse=True)
        for idx in used_indices:
            remaining.pop(idx)
        
        # Cria faixa
        used_width = sum(item[1] for item in best_combo)
        max_height = max(item[2] for item in best_combo)
        
        row = {
            'items': [{'w': item[1], 'h': item[2], 'orig_w': item[3], 'orig_h': item[4]} 
                      for item in best_combo],
            'used_width': used_width,
            'height': max_height
        }
        rows.append(row)
    
    return rows


def format_measurement(mm):
    """Converte mil√≠metros para formato mais leg√≠vel"""
    if mm >= 1000:
        return f"{mm/1000:.1f} m"
    else:
        return f"{mm} mm"


def format_area_m2(mm2):
    """Converte mil√≠metros quadrados para metros quadrados"""
    m2 = mm2 / 1_000_000  # 1 m¬≤ = 1.000.000 mm¬≤
    if m2 >= 1:
        return f"{m2:.2f} m¬≤"
    else:
        return f"{m2*10000:.1f} cm¬≤"  # Para √°reas muito pequenas, usa cm¬≤


def create_visual_row(row_num, row, roll_width):
    """Cria uma representa√ß√£o visual muito clara e intuitiva da faixa"""
    used_width = row['used_width']
    leftover = roll_width - used_width
    height = row['height']
    
    # Cabe√ßalho da faixa
    visual = f"\n{'='*80}\n"
    visual += f"üéØ FAIXA N√öMERO {row_num} - CORTE √öNICO\n"
    visual += f"{'='*80}\n\n"
    
    # RESUMO EXECUTIVO ANTES DE TUDO
    visual += "üìã RESUMO EXECUTIVO:\n"
    visual += "‚îÄ" * 50 + "\n"
    visual += f"   ‚Ä¢ Quantidade de pe√ßas nesta faixa: {len(row['items'])}\n"
    visual += f"   ‚Ä¢ Altura do corte: {height} mm\n"
    visual += f"   ‚Ä¢ Largura total utilizada: {used_width} mm\n"
    if leftover > 0:
        visual += f"   ‚Ä¢ Largura desperdi√ßada: {leftover} mm\n"
    visual += f"   ‚Ä¢ Aproveitamento: {(used_width/roll_width)*100:.1f}%\n\n"
    
    # DESENHO VISUAL DO ROLO COM PE√áAS
    visual += "üìê DESENHO DO CORTE:\n"
    visual += "‚îÄ" * 50 + "\n"
    visual += f"   Largura total do rolo: {roll_width} mm\n\n"
    
    # Desenho do rolo com as pe√ßas posicionadas
    visual += "   ‚îå" + "‚îÄ" * 76 + "‚îê\n"
    visual += f"   ‚îÇ{'ROL':^76}‚îÇ\n"
    visual += f"   ‚îÇ{'DE MANTA 1.050mm':^76}‚îÇ\n"
    visual += "   ‚îî" + "‚îÄ" * 76 + "‚îò\n"
    
    # Posicionamento das pe√ßas no rolo
    current_pos = 0
    for i, item in enumerate(row['items'], 1):
        piece_width = item['w']
        piece_height = item['h']
        orig_width = item['orig_w']
        orig_height = item['orig_h']
        
        # Calcula posi√ß√µes
        start_pos = current_pos
        end_pos = current_pos + piece_width
        
        # Desenho da pe√ßa no rolo
        piece_visual = "‚îÄ" * (piece_width // 10)  # Escala visual
        if len(piece_visual) < 3:
            piece_visual = "‚îÄ‚îÄ‚îÄ"
        
        # Linha superior da pe√ßa
        if start_pos == 0:
            visual += "   ‚îå" + piece_visual + "‚îê"
        else:
            visual += "   " + " " * (start_pos // 10) + "‚îå" + piece_visual + "‚îê"
        
        # Espa√ßo restante at√© o final
        remaining_space = (roll_width - end_pos) // 10
        if remaining_space > 0:
            visual += " " * remaining_space
        visual += "\n"
        
        # Conte√∫do da pe√ßa
        if start_pos == 0:
            visual += f"   ‚îÇ{i:^{len(piece_visual)}}‚îÇ"
        else:
            visual += "   " + " " * (start_pos // 10) + f"‚îÇ{i:^{len(piece_visual)}}‚îÇ"
        
        if remaining_space > 0:
            visual += " " * remaining_space
        visual += "\n"
        
        # Linha inferior da pe√ßa
        if start_pos == 0:
            visual += "   ‚îî" + piece_visual + "‚îò"
        else:
            visual += "   " + " " * (start_pos // 10) + "‚îî" + piece_visual + "‚îò"
        
        if remaining_space > 0:
            visual += " " * remaining_space
        visual += "\n"
        
        current_pos += piece_width
    
    # Legenda das pe√ßas
    visual += "\n   LEGENDA:\n"
    current_pos = 0
    for i, item in enumerate(row['items'], 1):
        piece_width = item['w']
        piece_height = item['h']
        orig_width = item['orig_w']
        orig_height = item['orig_h']
        
        start_pos = current_pos
        end_pos = current_pos + piece_width
        
        visual += f"   [{i}] = {orig_width}√ó{orig_height}mm ‚Üí corte de {piece_width}√ó{piece_height}mm\n"
        visual += f"        posi√ß√£o: {start_pos}mm at√© {end_pos}mm\n"
        
        current_pos += piece_width
    
    # Espa√ßo desperdi√ßado
    if leftover > 0:
        visual += f"\n   ‚ö†Ô∏è  ESPA√áO N√ÉO UTILIZADO:\n"
        visual += f"      ‚Ä¢ {leftover} mm desperdi√ßados\n"
        visual += f"      ‚Ä¢ posi√ß√£o: {used_width}mm at√© {roll_width}mm\n"
    
    visual += "\n"
    
    # INSTRU√á√ïES DE CORTE CLARAS
    visual += "‚úÇÔ∏è  INSTRU√á√ïES DE CORTE:\n"
    visual += "‚îÄ" * 50 + "\n"
    visual += f"1. Corte uma faixa de {height}mm de altura do rolo\n"
    visual += f"2. Na faixa cortada, fa√ßa os seguintes cortes verticais:\n\n"
    
    current_pos = 0
    for i, item in enumerate(row['items'], 1):
        piece_width = item['w']
        piece_height = item['h']
        orig_width = item['orig_w']
        orig_height = item['orig_h']
        
        start_pos = current_pos
        end_pos = current_pos + piece_width
        
        visual += f"   Corte {i}: na posi√ß√£o {end_pos}mm\n"
        visual += f"   ‚Üí Resultado: pe√ßa {orig_width}√ó{orig_height}mm\n\n"
        
        current_pos += piece_width
    
    if len(row['items']) > 1:
        visual += f"   RESULTADO FINAL: {len(row['items'])} pe√ßas cortadas lado a lado\n"
    else:
        visual += f"   RESULTADO FINAL: 1 pe√ßa cortada\n"
    
    visual += "\n" + "="*80 + "\n\n"
    
    return visual


def create_pieces_summary(pieces):
    """Cria um resumo claro das pe√ßas que ser√£o cortadas"""
    summary = """
üì¶ PE√áAS QUE SER√ÉO CORTADAS:

"""
    
    total_pieces = sum(p['qty'] for p in pieces)
    total_area = sum(p['w'] * p['h'] * p['qty'] for p in pieces)
    
    summary += f"   üìä RESUMO GERAL:\n"
    summary += f"   ‚Ä¢ Total de tipos de pe√ßas: {len(pieces)}\n"
    summary += f"   ‚Ä¢ Total de pe√ßas a cortar: {total_pieces}\n"
    summary += f"   ‚Ä¢ √Årea total necess√°ria: {format_area_m2(total_area)}\n\n"
    
    for i, piece in enumerate(pieces, 1):
        width = piece['w']
        height = piece['h']
        qty = piece['qty']
        area = width * height
        
        summary += f"   üî∏ TIPO DE PE√áA {i}:\n"
        summary += f"      ‚Ä¢ Dimens√µes originais: {width}mm √ó {height}mm\n"
        summary += f"      ‚Ä¢ Quantidade necess√°ria: {qty} unidades\n"
        summary += f"      ‚Ä¢ √Årea por pe√ßa: {format_area_m2(area)}\n"
        summary += f"      ‚Ä¢ √Årea total deste tipo: {format_area_m2(area * qty)}\n\n"
    
    return summary


def create_visual_summary(rows, total_height, used_area, loss_area, util, roll_width=ROLL_WIDTH):
    """Cria um resumo visual muito claro"""
    summary = f"""
üéØ RESUMO COMPLETO DO CORTE:

üìè MATERIAL NECESS√ÅRIO:
   ‚Ä¢ 1 manta de {format_measurement(roll_width)} de largura
   ‚Ä¢ {total_height}mm de comprimento total
   ‚Ä¢ √Årea total: {format_area_m2(roll_width * total_height)}

üì¶ O QUE VOC√ä VAI PRODUZIR:
   ‚Ä¢ {sum(len(r['items']) for r in rows)} pe√ßas no total
   ‚Ä¢ {len(rows)} faixas de corte
   ‚Ä¢ √Årea utilizada: {format_area_m2(used_area)}

üóëÔ∏è  O QUE VAI SOBRAR:
   ‚Ä¢ {format_area_m2(loss_area)} de material desperdi√ßado
   ‚Ä¢ {util:.1f}% de aproveitamento do material

üí° AVALIA√á√ÉO:
"""
    
    if util >= 90:
        summary += "   ‚úÖ EXCELENTE! Voc√™ aproveitou quase todo o material\n"
    elif util >= 80:
        summary += "   üëç BOM! O aproveitamento est√° satisfat√≥rio\n"
    elif util >= 70:
        summary += "   ‚ö†Ô∏è  REGULAR! Pode melhorar um pouco\n"
    else:
        summary += "   ‚ùå BAIXO! Muito material est√° sendo desperdi√ßado\n"
    
    summary += "\nüìã LISTA DE FAIXAS:\n"
    for i, r in enumerate(rows, 1):
        pieces_count = len(r['items'])
        used_width = r['used_width']
        height = r['height']
        summary += (f"   ‚Ä¢ Faixa {i}: {pieces_count} pe√ßas, "
                   f"{used_width}mm usado, {height}mm altura\n")
    
    return summary


def export_to_txt():
    """Exporta o resultado para arquivo TXT"""
    if not current_result_text:
        messagebox.showwarning("Aten√ß√£o", "Nenhum resultado para exportar!")
        return
    
    filename = filedialog.asksaveasfilename(
        defaultextension=".txt",
        filetypes=[("Arquivo de texto", "*.txt"), ("Todos os arquivos", "*.*")],
        title="Salvar plano de corte como..."
    )
    
    if filename:
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("PLANO DE CORTE OTIMIZADO\n")
                f.write("=" * 50 + "\n")
                f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n")
                f.write(f"Largura do rolo: {format_measurement(ROLL_WIDTH)}\n\n")
                f.write(current_result_text)
            
            messagebox.showinfo("Sucesso", 
                              f"Plano salvo em:\n{filename}")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar arquivo:\n{str(e)}")


def copy_to_clipboard():
    """Copia o resultado para a √°rea de transfer√™ncia"""
    if not current_result_text:
        messagebox.showwarning("Aten√ß√£o", "Nenhum resultado para copiar!")
        return
    
    try:
        root.clipboard_clear()
        root.clipboard_append(current_result_text)
        messagebox.showinfo("Sucesso", 
                          "Plano de corte copiado para a √°rea de transfer√™ncia!")
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao copiar:\n{str(e)}")


def print_result():
    """Imprime o resultado"""
    if not current_result_text:
        messagebox.showwarning("Aten√ß√£o", "Nenhum resultado para imprimir!")
        return
    
    try:
        # Cria um arquivo tempor√°rio para impress√£o
        temp_file = "temp_print.txt"
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write("PLANO DE CORTE OTIMIZADO\n")
            f.write("=" * 50 + "\n")
            f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n\n")
            f.write(current_result_text)
        
        # Imprime usando o comando do sistema
        os.system(f"lpr {temp_file}")
        
        # Remove o arquivo tempor√°rio
        os.remove(temp_file)
        
        messagebox.showinfo("Sucesso", "Enviado para impressora!")
    except Exception as e:
        messagebox.showerror("Erro", f"Erro ao imprimir:\n{str(e)}")


def export_to_pdf():
    """Exporta o resultado para PDF (simulado)"""
    if not current_result_text:
        messagebox.showwarning("Aten√ß√£o", "Nenhum resultado para exportar!")
        return
    
    filename = filedialog.asksaveasfilename(
        defaultextension=".pdf",
        filetypes=[("Arquivo PDF", "*.pdf")],
        title="Salvar plano de corte como PDF..."
    )
    
    if filename:
        try:
            # Por enquanto, criamos um arquivo de texto com extens√£o .pdf
            # Em uma vers√£o futura, poder√≠amos usar bibliotecas como reportlab
            with open(filename, 'w', encoding='utf-8') as f:
                f.write("PLANO DE CORTE OTIMIZADO\n")
                f.write("=" * 50 + "\n")
                f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}\n")
                f.write(f"Largura do rolo: {format_measurement(ROLL_WIDTH)}\n\n")
                f.write(current_result_text)
            
            messagebox.showinfo("Sucesso", 
                              f"Plano salvo como PDF em:\n{filename}\n\n"
                              "Nota: Esta √© uma vers√£o simplificada. "
                              "Para PDF profissional, instale a biblioteca reportlab.")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar PDF:\n{str(e)}")


def calculate():
    global current_result_text, current_pieces_data
    
    # Captura dimens√µes do rolo
    try:
        roll_width = int(roll_width_entry.get())
        roll_height = int(roll_height_entry.get())
        
        if roll_width <= 0 or roll_height <= 0:
            messagebox.showwarning("Aten√ß√£o", "Dimens√µes do rolo devem ser maiores que zero")
            return
            
    except ValueError:
        messagebox.showwarning("Aten√ß√£o", "Informe dimens√µes v√°lidas para o rolo")
        return
    
    # Captura pe√ßas
    pieces = []
    for w_e, h_e, q_e in entries:
        try:
            w = int(w_e.get())
            h = int(h_e.get())
            q = int(q_e.get())
        except ValueError:
            continue
        if w > 0 and h > 0 and q > 0:
            pieces.append({'w': w, 'h': h, 'qty': q})

    if not pieces:
        messagebox.showwarning("Aten√ß√£o", "Informe ao menos uma pe√ßa v√°lida")
        return

    # Valida√ß√£o: verifica se todas as pe√ßas cabem no rolo
    for piece in pieces:
        if piece['w'] > roll_width and piece['h'] > roll_width:
            messagebox.showwarning("Aten√ß√£o", 
                                 f"Pe√ßa {piece['w']}√ó{piece['h']}mm n√£o cabe no rolo de {roll_width}mm de largura, "
                                 f"nem mesmo rotacionada!")
            return

    current_pieces_data = pieces.copy()
    
    # === ALGORITMO OTIMIZADO ===
    rows = pack_pieces(pieces, roll_width, roll_height)
    
    total_height = sum(r['height'] for r in rows)
    total_area = roll_width * total_height
    
    # Calcula √°rea usada pelas pe√ßas
    used_area = 0
    for r in rows:
        for item in r['items']:
            used_area += item['w'] * item['h']
    
    loss_area = total_area - used_area
    util = used_area / total_area * 100 if total_area else 0

    result.delete('1.0', tk.END)
    
    # Cabe√ßalho muito claro
    result.insert(tk.END, "üéØ PLANO DE CORTE DE MANTAS PRI (OTIMIZADO)\n")
    result.insert(tk.END, "=" * 60 + "\n\n")
    
    # Informa√ß√µes b√°sicas
    result.insert(tk.END, "üìè INFORMA√á√ïES B√ÅSICAS:\n")
    result.insert(tk.END, "‚îÄ" * 40 + "\n")
    result.insert(tk.END, 
                 f"   ‚Ä¢ Largura da manta: {format_measurement(roll_width)}\n")
    result.insert(tk.END, 
                 f"   ‚Ä¢ Total de pe√ßas: {sum(p['qty'] for p in pieces)}\n")
    result.insert(tk.END, f"   ‚Ä¢ Total de faixas: {len(rows)}\n")
    result.insert(tk.END, 
                 f"   ‚Ä¢ Comprimento total: {format_measurement(total_height)}\n")
    result.insert(tk.END, f"   ‚Ä¢ Aproveitamento: {util:.1f}%\n\n")
    
    # Resumo das pe√ßas que ser√£o cortadas
    result.insert(tk.END, create_pieces_summary(pieces))
    
    # Visualiza√ß√£o detalhada de cada faixa
    result.insert(tk.END, "üìê DETALHES DE CADA FAIXA:\n")
    result.insert(tk.END, "=" * 60 + "\n")
    
    for i, r in enumerate(rows, 1):
        visual_row = create_visual_row(i, r, roll_width)
        result.insert(tk.END, visual_row)
    
    # Resumo final muito claro
    result.insert(tk.END, create_visual_summary(rows, total_height, 
                                              used_area, loss_area, util, roll_width))
    
    # Salva o texto atual para exporta√ß√£o
    current_result_text = result.get('1.0', tk.END)


# ==== GUI ====
root = tk.Tk()
root.title('üéØ Otimizador de Cortes de Mantas PRI 1.050x50 (OTIMIZADO)')
root.geometry('900x800')

# Frame principal
main_frame = tk.Frame(root, padx=20, pady=20)
main_frame.pack(fill=tk.BOTH, expand=True)

# T√≠tulo
title_label = tk.Label(main_frame, 
                      text="üéØ OTIMIZADOR DE CORTES DE MANTAS PRI (OTIMIZADO)", 
                      font=('Arial', 16, 'bold'), fg='#2E86AB')
title_label.pack(pady=(0, 20))

# Frame para dimens√µes do rolo
roll_frame = tk.LabelFrame(main_frame, text="üìè DIMENS√ïES DO ROLO", 
                          font=('Arial', 12, 'bold'), fg='#2E86AB', padx=15, pady=15)
roll_frame.pack(fill=tk.X, pady=(0, 20))

# Campos para dimens√µes do rolo
roll_inputs_frame = tk.Frame(roll_frame)
roll_inputs_frame.pack()

tk.Label(roll_inputs_frame, text='Largura do rolo (mm):', 
         font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=(0, 10), sticky='e')
roll_width_entry = tk.Entry(roll_inputs_frame, width=15, font=('Arial', 10))
roll_width_entry.insert(0, "1050")  # Valor padr√£o
roll_width_entry.grid(row=0, column=1, padx=(0, 20))

tk.Label(roll_inputs_frame, text='Altura m√°xima (mm):', 
         font=('Arial', 10, 'bold')).grid(row=0, column=2, padx=(0, 10), sticky='e')
roll_height_entry = tk.Entry(roll_inputs_frame, width=15, font=('Arial', 10))
roll_height_entry.insert(0, "50000")  # Valor padr√£o (ilimitada)
roll_height_entry.grid(row=0, column=3)

# Texto explicativo
info_label = tk.Label(roll_frame, 
                     text="üí° Dica: Altura m√°xima pode ser deixada alta (50000mm) para rolos longos",
                     font=('Arial', 9), fg='#666666')
info_label.pack(pady=(10, 0))

# Frame para entrada de dados
input_frame = tk.LabelFrame(main_frame, text="üìù DADOS DAS PE√áAS", 
                           font=('Arial', 12, 'bold'), padx=15, pady=15)
input_frame.pack(fill=tk.X, pady=(0, 20))

# Cabe√ßalhos das colunas
headers_frame = tk.Frame(input_frame)
headers_frame.pack(fill=tk.X, pady=(0, 10))

tk.Label(headers_frame, text='Largura (mm)', 
         font=('Arial', 10, 'bold')).grid(row=0, column=0, padx=5)
tk.Label(headers_frame, text='Altura (mm)', 
         font=('Arial', 10, 'bold')).grid(row=0, column=1, padx=5)
tk.Label(headers_frame, text='Quantidade', 
         font=('Arial', 10, 'bold')).grid(row=0, column=2, padx=5)

entries = []
for i in range(8):  # Aumentei para 8 linhas
    row_frame = tk.Frame(input_frame)
    row_frame.pack(fill=tk.X, pady=2)
    
    e_w = tk.Entry(row_frame, width=12, font=('Arial', 10))
    e_h = tk.Entry(row_frame, width=12, font=('Arial', 10))
    e_q = tk.Entry(row_frame, width=8, font=('Arial', 10))
    
    e_w.grid(row=0, column=0, padx=5)
    e_h.grid(row=0, column=1, padx=5)
    e_q.grid(row=0, column=2, padx=5)
    
    entries.append((e_w, e_h, e_q))

# Frame para bot√µes
buttons_frame = tk.Frame(main_frame)
buttons_frame.pack(pady=20)

# Bot√£o calcular
calc_button = tk.Button(buttons_frame, text='üöÄ CALCULAR PLANO DE CORTE OTIMIZADO', 
                       command=calculate, font=('Arial', 12, 'bold'),
                       bg='#2E86AB', fg='white', padx=20, pady=10)
calc_button.pack(side=tk.LEFT, padx=(0, 10))

# Frame para bot√µes de exporta√ß√£o
export_frame = tk.LabelFrame(main_frame, text="üì§ EXPORTAR RESULTADO", 
                            font=('Arial', 10, 'bold'), padx=10, pady=10)
export_frame.pack(fill=tk.X, pady=(0, 20))

# Bot√µes de exporta√ß√£o
export_buttons_frame = tk.Frame(export_frame)
export_buttons_frame.pack()

tk.Button(export_buttons_frame, text='üìÑ Salvar TXT', 
          command=export_to_txt, font=('Arial', 9),
          bg='#28a745', fg='white', padx=15, pady=5).pack(side=tk.LEFT, padx=5)

tk.Button(export_buttons_frame, text='üìã Copiar', 
          command=copy_to_clipboard, font=('Arial', 9),
          bg='#17a2b8', fg='white', padx=15, pady=5).pack(side=tk.LEFT, padx=5)

tk.Button(export_buttons_frame, text='üñ®Ô∏è  Imprimir', 
          command=print_result, font=('Arial', 9),
          bg='#ffc107', fg='black', padx=15, pady=5).pack(side=tk.LEFT, padx=5)

tk.Button(export_buttons_frame, text='üìä Salvar PDF', 
          command=export_to_pdf, font=('Arial', 9),
          bg='#dc3545', fg='white', padx=15, pady=5).pack(side=tk.LEFT, padx=5)

# √Årea de resultados
result_frame = tk.LabelFrame(main_frame, text="üìä RESULTADO", 
                            font=('Arial', 12, 'bold'))
result_frame.pack(fill=tk.BOTH, expand=True)

result = scrolledtext.ScrolledText(result_frame, width=80, height=25, 
                                 font=('Consolas', 10))
result.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

# Instru√ß√µes
instructions = tk.Label(main_frame, 
                      text=("üí° Dica: Insira as dimens√µes das pe√ßas, calcule e "
                           "use os bot√µes de exporta√ß√£o para salvar/compartilhar! "
                           "Algoritmo otimizado para m√°ximo aproveitamento."),
                      font=('Arial', 10), fg='#666666')
instructions.pack(pady=(10, 0))

root.mainloop()